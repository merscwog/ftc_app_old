include ':FtcRobotController'

settings.extensions.create('ftc', FtcSettings, settings)

File ftcConfig = new File(rootDir.parent, 'ftc-config.gradle')
if (ftcConfig.exists()) {
  apply from: ftcConfig
}

if (settings.includeDefaultTeamModule) {
  include ':TeamCode'
}

import static groovy.io.FileType.FILES
import static groovy.io.FileType.DIRECTORIES

File parentDir = rootDir.parentFile

if (settings.autoSearchByTokenFiles) {
  def tokenFilePattern = ~/ftc-(module|source)\.gradle/

  parentDir.traverse(type      : FILES,
		     nameFilter: tokenFilePattern,
		     maxDepth  : 2) {
    File tokenFile ->
      if (tokenFile.name.contains('module')) {
	File moduleDir = tokenFile.parentFile
	String moduleName = moduleDir.name

	if (tokenFile.size() > 0) {
	  tokenFile.withReader {
	    String firstLineTrimmed = it.readLine().trim()
	    if (firstLineTrimmed) {
	      moduleName = firstLineTrimmed
	    }
	  }
	}

	ftc.addExternalModule(moduleName, moduleDir.canonicalPath)
	logger.info "Adding module '${moduleName}' from tokenFile: ${tokenFile}"
      }
      else {
	ftc.addExternalSourceSet(tokenFile.parent.canonicalPath)
	logger.info "Adding sourceSet from tokenFile: ${tokenFile}"
      }
  }
}

if (settings.autoSearchForTeamModules || settings.autoSearchForTeamCode) {
  String pattern = settings.dirNameSearchPattern

  parentDir.eachFileMatch(DIRECTORIES, ~pattern) { File teamDir ->
    if (settings.autoSearchForTeamModules &&
	new File(teamDir, 'build.gradle').exists()) {

      ftc.addExternalModule(teamDir.name, teamDir.canonicalPath)
      logger.info "Adding module ${teamDir.name}"
    }
    else if ((settings.includeDefaultTeamModule &&
	      settings.autoSearchForTeamCode)) {

      ftc.addExternalSourceSet(teamDir)
      logger.info "Adding external sourceSet dir: ${sourcesRoot.canonicalPath}"
    }
    else {
      logger.info "Skipping external directory: ${teamDir.path}"
    }
  }
}

settings.externalModulePaths.each { String projName, File projPath ->
  include projName
  project(projName).projectDir = projPath
}

class FtcSettings {
  final Settings settings

  FtcSettings(final Settings settings) {
    this.settings = settings
    this.settings.ext.includeDefaultTeamModule = true
    this.settings.ext.autoSearchForTeamModules = false
    this.settings.ext.autoSearchForTeamCode = false
    this.settings.ext.autoSearchByTokenFiles = true
    this.settings.ext.dirNameSearchPattern = /[Tt]eam([0-9])+/
    this.settings.ext.externalModulePaths = [:]
    this.settings.gradle.ext.externalSourceFilePaths = []
  }

  void disableDefaultTeamModule() {
    settings.includeDefaultTeamModule = false
  }

  void enableSearchForExternalTeamModulesByPattern() {
    settings.autoSearchForTeamModules = true
  }

  void enableSearchForExternalSourceSetsByPattern() {
    settings.autoSearchForTeamCode = true
  }

  void disableSearchForExternalsByTokenFiles() {
    settings.autoSearchByTokenFiles = false
  }

  void setExternalDirectoryNameSearchPattern(String newPattern) {
    if (newPattern) {
      settings.dirNameSearchPattern = newPattern
    }
  }

  void addExternalModule(String name) {
    addExternalModule(name, name)
  }

  void addExternalModule(String name, String path) {
    if (! name?.startsWith(':')) {
      name = ":${name}"
    }

    def modulePath = new File(path)
    if (! modulePath.isAbsolute()) {
      modulePath = new File(settings.rootDir.parent, path)
    }

    settings.externalModulePaths[name] = modulePath
  }

  void addExternalSourceSet(String path) {
    def sourceSetPath = new File(path)
    if (! sourceSetPath.isAbsolute()) {
      sourceSetPath = new File(settings.rootDir.parent, path)
    }

    File possibleSourcesRoot = new File(sourceSetPath, 'src/main/java')
    if (possibleSourcesRoot.exists()) {
      sourceSetPath = possibleSourcesRoot
    }

    settings.gradle.externalSourceFilePaths << sourceSetPath.canonicalPath
  }
}
